{"/home/travis/build/npmtest/node-npmtest-excel-parser/test.js":"/* istanbul instrument in package npmtest_excel_parser */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-excel-parser/lib.npmtest_excel_parser.js":"/* istanbul instrument in package npmtest_excel_parser */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_excel_parser = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_excel_parser = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-excel-parser/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-excel-parser && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_excel_parser */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_excel_parser\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_excel_parser.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_excel_parser.rollup.js'] =\n            local.assetsDict['/assets.npmtest_excel_parser.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_excel_parser.__dirname + '/lib.npmtest_excel_parser.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-excel-parser/node_modules/excel-parser/excelParser.js":"var _ = require('underscore'),\n    async = require('async'),\n    fs = require('fs'),\n    path = require('path'),\n    utils = require('./utils').utils,\n    excelParser = {};\n\nexcelParser.worksheets = function(options, cb) {\n  var worksheets, cb = cb && typeof(cb) === \"function\" ? cb : null, args = [];\n  if(!cb) throw new Error(\"worksheets will required two arguments. worksheets(options, callback)\")\n  else if(!options || typeof(options) !== 'object') return cb(\"Invalid arguments.\");\n  else if(!options.inFile) return cb(\"File is missing in arguments\");\n\n  fs.exists(options.inFile, function(exists) {\n    if(!exists) return cb(\"File not found\");\n    args = ['-x', '\"'+path.relative(__dirname, options.inFile)+'\"', '-W'];\n    utils.execute(args, function(err, stdout) {\n      if(err) return cb(err);\n      worksheets = _.compact(stdout.split(/\\n/));\n      if(worksheets) return cb(null, JSON.parse(worksheets));\n      else return cb(new Error(\"Not found any worksheet in given spreadsheet\"));\n    });\n  });\n};\n\nexcelParser.parse = function(options, cb) {\n  var args = [], _this = this;\n  if(!cb) throw new Error(\"worksheets will required two arguments. worksheets(options, callback)\");\n  else if(!options || typeof(options) !== 'object') return cb(\"Invalid arguments.\");\n  else if(!options.inFile) return cb(\"File is missing in arguments\");\n  fs.exists(options.inFile, function(exists) {\n    if(!exists) return cb(\"File not found\");\n    args = ['-x', '\"'+path.relative(__dirname, options.inFile)+'\"'];\n    if(!options.worksheet) {\n      var records = [];\n      _this.worksheets(options, function(err, worksheets) {\n        if(err) return cb(err);\n        async.series(_.map(worksheets, function(worksheet) {\n          return function(rcb) {\n            args.push('-n', worksheet.id);\n            utils.pickRecords(args, options, function(err, parsed) {\n              if(err) return cb(err);\n              records.push(parsed);\n              rcb(null);\n            });\n          }\n        }), function(err, parsed) {\n          if(err) return cb(err);\n          cb(null, parsed);\n        });\n      });\n    } else {\n      if(typeof(options.worksheet) === 'number') {\n        args.push('-n', options.worksheet);\n      } else if(typeof(options.worksheet) === 'string') {\n        args.push('-w', '\"'+ options.worksheet.trim() + '\"');\n      } else {\n        return callback(new Error('\"worksheet\" should be string or intiger'));\n      }\n      utils.pickRecords(args, options, function(err, parsed) {\n        if(err) return cb(err);\n        cb(null, parsed);\n      });\n    }\n  });\n};\nmodule.exports = excelParser;","/home/travis/build/npmtest/node-npmtest-excel-parser/node_modules/excel-parser/utils.js":"var _ = require('underscore'),\n    async = require('async'),\n    exec = require('child_process').exec,\n    fs = require('fs'),\n    path = require('path'),\n    temp = require('temp'),\n    utils = {},\n    _this = this;\n\nvar _CRCsv = function(args, cb) {\n  temp.mkdir('temp', function(err, dirPath) {\n    if(err) return cb(err);\n    csvFile = path.join(dirPath, 'convert.csv');\n    args.push('-c', csvFile);\n    utils.execute(args, function(err, stdout) {\n      if(err) return cb(err);\n      fs.readFile(csvFile, 'utf-8', function(err, csv_data) {\n        if(err) return cb(err);\n        cb(null, csv_data);\n      });\n    });\n  });\n};\n\nvar _parseCSV = function(csv_data, cb) {\n  if(!csv_data) return cb(null, []);\n  var pattern = /(\\,|\\r?\\n|\\r|^)(?:\"([^\"]*(?:\"\"[^\"]*)*)\"|([^\"\\,\\r\\n]*))/gi,\n      data = [[]],\n      matched = [],\n      strMatchedValue;\n\n  while(matched = pattern.exec(csv_data)) {\n    var strMatchedDelimiter = matched[1];\n    if (\n      strMatchedDelimiter.length &&\n      (strMatchedDelimiter != \",\") &&\n      !_.isEmpty(data[data.length-1])\n    ) {\n      data.push([]);\n    }\n\n    if(matched[2]) strMatchedValue = matched[2].replace(/\"\"/g, \"\\\"\");\n    else strMatchedValue = matched[3];\n\n    data[data.length-1].push(strMatchedValue);\n  }\n\n  if(data[data.length-1].length === 1)\n    data.splice(data.length-1, 1);\n\n  cb(null, data);\n};\n\nvar _skipEmpty = function(records, options, cb) {\n  if(_.isEmpty(records)) return cb(null, []);\n\n  var skipEmpty = false;\n  if(options.skipEmpty && typeof(options.skipEmpty) === 'boolean')\n    skipEmpty = options.skipEmpty;\n\n  if(skipEmpty) return cb(null, _.map(records, function(record){return _.compact(record)}));\n  else return cb(null, records);\n};\n\nvar _searchInArray = function(records, options, cb) {\n  if(_.isEmpty(records)) return cb(null, []);\n  var term, s = \"strict\", searchType = l = \"loose\", searchPattern, searched=[];\n  if(!options.searchFor) return cb(null, records);\n  if(!options.searchFor.term && options.searchFor.term !== 'object')\n    return cb(null, records);\n  term = _.map(options.searchFor.term, function(t) {\n    return t.replace(/\\//g, '');\n  });\n\n  if(\n    options.searchFor.type &&\n    (\n      options.searchFor.type.trim() === l ||\n      options.searchFor.type.trim() === s\n    )\n  ) searchType = options.searchFor.type;\n\n  if(searchType === s) {\n    searchPattern = _.map(term, function(s) { return \"\\\\b\" + s + \"\\\\b\"; });\n    searchPattern = new RegExp('(' + searchPattern.join('|') + ')', \"g\");\n  } else searchPattern = new RegExp('(' + term.join('|') + ')', \"gi\");\n\n  for(var i=0, len=records.length; i< len; ++i) {\n    var strRow = records[i].join(' ').replace(/\\//g, '');\n    if(searchPattern.test(strRow)) searched.push(records[i]);\n  }\n  cb(null, searched);\n};\n\nutils.execute = function(args, cb) {\n  var cmd = [\"python\", __dirname + \"/convert.py\"];\n  cmd = cmd.concat(args);\n  exec(\n    cmd.join(' '),\n    {cwd: __dirname},\n    function(err, stdout, stderr) {\n      if(err) return cb(err);\n      if(stderr) return cb(stderr);\n      cb(null, stdout);\n    }\n  );\n};\n\nutils.pickRecords = function(args, options, cb) {\n  var csvFile;\n  async.waterfall([\n    function(cb){ _CRCsv(args, cb) },\n    function(csv_data, cb){ _parseCSV(csv_data, cb) },\n    function(parsedArray, cb) { _skipEmpty(parsedArray, options, cb) },\n    function(parsedArray, cb) { _searchInArray(parsedArray, options, cb) }\n  ], function(err, parsed) {\n    if(err) return cb(err);\n    cb(null, parsed);\n  });\n};\n\nexports.utils = utils;","/home/travis/build/npmtest/node-npmtest-excel-parser/node_modules/excel-parser/Gruntfile.js":"'use strict';\n\nmodule.exports = function(grunt) {\n  //Project configuration\n  grunt.initConfig({\n    jshint: {\n      all: [\n        'Gruntfile.js',\n        '<%= nodeunit.tests %>'\n      ],\n      options: {\n        jshintrc: '.jshintrc'\n      }\n    },\n\n    // Watch\n    watch: {\n      all: {\n        files: ['<%= jshint.all %>'],\n        tasks: ['jshint', 'nodeunit']\n      }\n    },\n\n    // Unit test\n    nodeunit: {\n      tests: ['test/**/*_test.js']\n    }\n  });\n\n  //These plugins provide necessary tasks.\n  grunt.loadNpmTasks('grunt-contrib-jshint');\n  grunt.loadNpmTasks('grunt-contrib-nodeunit');\n  grunt.loadNpmTasks('grunt-contrib-internal');\n\n  // run all test\n  grunt.registerTask('default', ['jshint', 'nodeunit']);\n\n};"}